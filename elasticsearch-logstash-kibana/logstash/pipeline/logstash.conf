input {
    beats {
        port => 5044
    }
    http {
        host => "0.0.0.0"
        port => "8099"
    }
    #从文件读取数据
    file {
        path => ["/var/log/nginx/access.log"]
        type => "nginx_log"
        tags => [ "nginx_log_access" ]
        start_position => "beginning"
        exclude => "*.gz"
    }
    #从文件读取数据
    file {
        path => ["/var/log/nginx/error.log"]
        type => "nginx_log"
        tags => [ "nginx_log_error" ]
        start_position => "beginning"
        exclude => "*.gz"
    }
    file {
        path => ["/var/log/site_log/*.log"]
        type => "site_log" #如果你日志中有type字段(logstash -e解析出的根字段)这里就不要用type了
        tags => [ "site_log" ]
        start_position => "beginning"
        #start_position => "end"
        #sincedb_path => "/dev/null"  # 每次启动时都从头读取文件
        sincedb_path => "/usr/share/logstash/sincedb_site_log.data"
        codec => "json"
    }
}
filter {
    if [type] == "nginx_log" {
        if "nginx_log_access" in [tags] {
            grok {
                #patterns_dir => ["/usr/share/logstash/patterns"]
                match => ["message", "%{HTTPD_COMBINEDLOG}"] #或者使用自定义%{NGINX_ACCESS}
                remove_field => "message"    #删除出不需要的字段
            }
        }
        if "nginx_log_error" in [tags] {
            grok {
                match => [
                    "message", "(?<time_local>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:log_level}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:error_message}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server}?)(?:, request: %{QS:request})?(?:, upstream: (?<upstream>\"%{URI}\"|%{QS}))?(?:, host: %{QS:request_host})?(?:, referrer: \"%{URI:referrer}\")?",
                    "message", "(?<time_local>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:log_level}\]\s{1,}%{GREEDYDATA:error_message}"
                ]
            }
        }

        mutate {
            gsub => ["agent", "\"", ""]
            gsub => ["referrer", "\"", ""]
            gsub => ["forwarder", "\"", ""]
            convert => ["status", "integer"]
            convert => ["body_bytes", "integer"]
        }
        date {
            match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
        ruby {
            #增加一个字段log_day
            code => "event.set('log_day', event.get('@timestamp').time.localtime.strftime('%Y%m%d'))"
        }
    }
    if [type] == "site_log" {
        json {
            source => "message"
            target => "jsoncontent"
        }
        geoip {
            target => "geoip"
            source => "ip"
            database => "/usr/share/logstash/GeoLite2-City.mmdb"
            fields => ["city_name", "region_name", "country_name"]
        }
    }
}
output {
    if [type] == "nginx_log" and "nginx_log_access" in [tags] {
        elasticsearch {
            hosts => ["elasticsearch"]
            manage_template => false
            index =>"nginx-log-access-%{+YYYYMMdd}"
            #index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "es123456"
        }
    }
    if [type] == "nginx_log" and "nginx_log_error" in [tags] {
        elasticsearch {
            hosts => ["elasticsearch"]
            manage_template => false
            index =>"nginx-log-error-%{log_day}"
            user => "elastic"
            password => "es123456"
        }
    }
    if "site_log" in [tags] { #如果你日志中有type字段(logstash -e解析出的根字段)这里就不要用type了
        elasticsearch {
            hosts => ["elasticsearch"]
            index => "site-log-%{+YYYY.MM}"
            user => "elastic"
            password => "es123456"
        }
    }

    stdout {
        codec => rubydebug
    }
}